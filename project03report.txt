As you answer these questions, remember to make explicit references to your
code.  For example, don't just say, "I did such and so;" instead say, "I did
such and so on main.cpp:13-15."  You may use the notation file:line or
file:line:col to refer to places in your code.

1.  Explain why your queue is thread-safe.  Tell, for each operation supported
    by the queue (i.e., public method), what steps you took to make it
    thread-safe.  Tell why are sure no one may bypass your safeguards to cause
    race conditions.

        The queue that backs the thread-safe queue is private and protected with a mutex, which is locked in each public method.
        The waitForElement method creates a lock on the mutex and waits until work is received. Once work is received, it releases the mutex so that the thread which was awakened can pop off of the queue. The pop method adopts the mutex and then unlocks it after popping.

2.  How many threads did you create to handle requests?  Why did you select
    this number?  Be sure to reference where in your code you create the
    threads.

        My program uses hardware_concurrency * 2
        There is a balance to strike between average processing time for each request, which can be lowered by increasing the number of threads, and total processing time, which can be lowered by decreasing the number of threads. I think that this provides a good middle ground that will allow plenty of requests to be served at the same time without slowing the server down too much.
        main.cpp:182

3.  You should have had at least three global variables in your program: the
    word list, the distance table, and the cache.  List, for each of these
    variables, what steps you took to ensure that all accesses to them were
    thread-safe.  Explain your reasoning.

        * Word list
        No action was needed. Since the word list is never mutated except on startup, it is already thread-safe.

        * Distance table
        I created an instance of the DistanceTable for each thread, which is then passed down to the class using it. This allows for each thread to run the algorithm at the same time, while avoiding the reallocation of the DistanceTable for each invocation of the method. I realize it isn't clean to pass that object down, but I couldn't think of a better way to do it.

        * Cache
        I created a cache class which managed access to the maps. I did this to prevent the following scenario. The cache has its own mutex which controls access to the two thread-safe maps which backs it.

            1. Worker thread checks for word in map; word exists
            2. Worker thread check if word is expired; word isn't expired but is about to
            3. Cache is cleaned, removing the word from both maps
            4. Worker thread cannot find word in map

4.  Explain why your map is thread-safe.  Tell, for each operation supported
    by the map (i.e., public method), what steps you took to make it
    thread-safe.  Tell why you can be sure no one may bypass your safeguards
    to cause race conditions.

        The underlying map is private, so it accessible only through class methods.
        Each method uses a lock_guard if it is writing; otherwise it uses a shared_lock

5.  Where in your code do you read and update the cache?  How much
    syncrhonization do you expect for these operations: how likely are they to
    block?

        main:80
        There shouldn't be too much blocking. The cache uses a lock guard when cleaning the cache. This will block while it searches for entries to remove.
        At first I used a shared_lock while searching for entries, and upgrading the lock while erasing, but this would be problematic if two threads called the clean method at the same time.

6.  Explain your strategy for removing entries from the cache.  Explain why
    your approach is thread-safe.

        Every 10 seconds I run the clean method of my cache class. It will lock both maps and iterate over entry, finding the expired keys. After that it iterates over the expired keys and erases the entries from both maps.
        Since both maps are locked, we are always in a valid state.

7.  I asked you to create a second map to store timestamps.  Another option
    would have been to store the timestamps in the cache along with the
    results.  Explain the difference between these two operations in terms of
    synchronization: is one approach more likely to cause blocking than
    another?

        Both approaches will cause the same amount of blocking. We have to synchronize while iterating over the entries of the map.

8.  (Optional) Tell me something interesting you learned from doing this
    project.

        I spent a lot of time trying to properly understand move semantics in C++, I think I now have a solid(ish) understanding of it. It also cemented how condition variable and shared mutexes work, and used the knowledge I had of operator overloading and C++ classes and templates, which I haven't used much since OOP a couple of years ago.

9.  (Optional) Tell me something you didn't like about this project.  Was it
    something you think should be changed about the project, or just
    something inherently difficult about the project?

        I thought it was difficult to write a generic thread-safe way to iterate over each item in my map. After searching I found a way to do it with templates, although I'm not sure how it works.

10. (Optional) Tell me something about your implementation that you are proud
    of.  For example, something that was difficult to do but that you
    eventually figured out; something that you feel you did particularly well;
    or something that you did that was beyond what was asked.

        My threads will all cleanly close, although the cache worker will take up to 10 seconds to exit. I also added a cache class to combine my two thread-safe maps
